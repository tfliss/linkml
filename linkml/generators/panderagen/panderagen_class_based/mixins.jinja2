{#-
  Jinja2 Template for a mixin class used by the Linkml/Pandera class-based model
  Inline generation avoids dependencies on LinkML in the generated code.

-#}
class _LinkmlPanderaValidator:
    @classmethod
    def _check_cardinality(cls, df, column_name, min_cardinality : int=None, max_cardinality : int=None):
        min_expr = (nw.col('count') >= min_cardinality)
        max_expr = (nw.col('count') <= max_cardinality)

        if min_cardinality is not None:
            if max_cardinality is not None:
                combined_expression = (min_expr and max_expr).all()
            else:
                combined_expression = min_expr.all()
        else:
            combined_expression = max_expr.all()

        df = (
            nw.from_native(df)
            .group_by(column_name)
            .agg(
                nw.col(column_name).count().alias('count')
            )
            .select(combined_expression)
            .to_native()
        )

        return df


    @classmethod
    def _check_nested_struct(cls, pandera_model: pla.DataFrameModel, data: PolarsData):
        """Use this in a custom check. Pass the nested model as pandera_model.
        """
        try:
            unnested_column = data.lazyframe.select(data.key).unnest(data.key)
        except Exception as e:
            unnested_column = data.lazyframe.collect().select(pl.col(data.key).explode()).lazy().unnest(data.key)

        pandera_model.validate(unnested_column)

        return True


    @classmethod
    def generate_polars_schema(cls, object_to_validate) -> dict:
        """Creates a nested PolaRS schema suitable for loading the object_to_validate.
        Optional columns that are not present in the data are omitted.
        This approach is only suitable to enable the test fixtures.
        """
        polars_schema = {}

        for column_name, column in cls.to_schema().columns.items():
            dtype = column.properties["dtype"]
            required = column.properties["required"]

            if required or column_name in object_to_validate:
                if dtype.type == pl.Struct:
                    pass
                else:
                    polars_schema[column_name] = dtype.type

        return polars_schema
